/**************************************************************************
 DictionaryAnalyser - Package based in DixTools and created to provide a set
               of tools that ease the addition of new entries to dictionaries
               and helps to analyse the dictionaries.

 Copyright (C) 2011-2012 Universitat d'Alacant [www.ua.es]

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 **************************************************************************/

package es.ua.dlsi.lexicalinformation;

import dics.elements.dtd.Dictionary;
import dics.elements.dtd.DixElement;
import dics.elements.dtd.E;
import dics.elements.dtd.P;
import dics.elements.dtd.Par;
import dics.elements.dtd.Pardef;
import dics.elements.dtd.S;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

/**
 * Class that contains a list of closed categories from Apertium dictionaries 
 * and implements a set of methods for determining whether a
 * paradigm/category/candiate belongs or not to a closed category.
 * Class that contains a list of closed categories from Apertium dictionaries 
 * and implements a set of methods for determining whether a
 * paradigm/category/candiate belongs or not to a closed category.
 * @author Miquel Espl√† Gomis
 */
public class ClosedCategories {

    /** Set of closed categories **/
    private static Set<String> closedposcat=null;

    /**
     * Method that determines whether a given lexical category is closed or not.
     * This method determines whether a given lexical category is closed or not
     * by using the name of the category.
     * @param catname Name of the category to be checked.
     * @return Returns <code>true</code> if the category is closed and
     * <code>false</code> otherwise.
     */
    public static boolean isClosedCat(String catname){
        if(closedposcat==null){
            closedposcat=new LinkedHashSet<String>();
            String[] arrayclosedcat={"vbmod","vbser","vbhaver","rel","preadv","det",
            "prn","pr","num", "cnjcoo", "rel", "cnjsub", "numeros", "separa", "sent",
            "coma","cm","separ","lquest","paresq","lpar","pardret","rpar","emails",
            "web","urls","ip"};
            
            closedposcat=new LinkedHashSet<String>(Arrays.asList(arrayclosedcat));
        }
        return closedposcat.contains(catname);
    }
    
    /**
     * Method that determines whether the forms generated by a given paradigm
     * belong or not to a closed paradigm.
     * @param paradigm Name of the paradigm to be checked.
     * @param dic Dictionary in which the paradigm is defined.
     * @return Returns <code>true</code> if the forms generated by the paradigm
     * are closed and <code>false</code> otherwise.
     */
    static public boolean isClosedCategoryParadigm(String paradigm, Dictionary dic){
        Pardef par=dic.pardefs.getParadigmDefinition(paradigm);
        return isClosedCategoryParadigm(par);
    }

    /**
     * Method that determines whether the forms generated by a given paradigm
     * belong or not to a closed paradigm.
     * @param paradigm <code>Pardef</code> object to be checked.
     * @return Returns <code>true</code> if the forms generated by the paradigm
     * are closed and <code>false</code> otherwise.
     */
    static public boolean isClosedCategoryParadigm(Pardef paradigm){
        boolean exit=false;
        for(E e: paradigm.elements){
            for(DixElement de: e.children){
                if(de instanceof P){
                    exit=isClosedCategory(((P)de).r.getSymbols());
                }
            }
        }
        return exit;
    }
    
    /**
     * Method that determines whether any of the symbols in a list of symbols
     * <code>S</code> belongs to a closed category.
     * @param elementlist list of symbols to be checked
     * @return Returns <code>true</code> if any of the symbols belongs to a
     * closed category and <code>false</code> otherwise.
     */
    static public boolean isClosedCategory(ArrayList<S> elementlist){
        boolean closedcat=false;
        for(S symbol: elementlist){
            if(isClosedCat(symbol.name)){
                closedcat=true;
                break;
            }
            break;
        }
        return closedcat;
    }
    
    /**
     * Method that determines whether an element from an Apertium dictionary
     * <code>E</code> belongs to a closed category.
     * @param elemen element to be checked
     * @param dic dictionary in which the element appears
     * @return Returns <code>true</code> if the element belongs to a closed
     * category and <code>false</code> otherwise.
     */
    static public boolean isClosedCategory(E element, Dictionary dic){
        Pardef paradigm_definition=null;
        for (DixElement e: element.children)
        {
            if (e instanceof Par)
            {
                paradigm_definition=dic.pardefs.getParadigmDefinition(((Par)e).name);
                break;
            }
        }
        if(paradigm_definition!=null){
            return isClosedCategoryParadigm(paradigm_definition);
        }
        else{
            return false;
        }
    }
}
