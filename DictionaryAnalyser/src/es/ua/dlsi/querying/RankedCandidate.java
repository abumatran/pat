/**************************************************************************
 DictionaryAnalyser - Package based in DixTools and created to provide a set
               of tools that ease the addition of new entries to dictionaries
               and helps to analyse the dictionaries.

 Copyright (C) 2011-2012 Universitat d'Alacant [www.ua.es]

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 **************************************************************************/

package es.ua.dlsi.querying;

import es.ua.dlsi.monolingual.Candidate;
import es.ua.dlsi.monolingual.EquivalentCandidates;
import java.util.Set;

/**
 * Class that extends the usual candidates stem/paradigm by adding a score to
 * the candidate in order to build a ranking.
 * @author Miquel Espl√† Gomis
 */
public class RankedCandidate extends EquivalentCandidates{
    
    /**
     * Score assigned to the candidate.
     */
    private double score;

    /**
     * List of surface word forms generated by the candidate and scored by their
     * likelyhood to appear in a corpus.
     */
    protected ScoredSurfaceFormsSet sfs;
    
    public RankedCandidate(RankedCandidate candidate) {
        super(candidate.getCandidates());
        this.score = candidate.score;
        this.sfs = new ScoredSurfaceFormsSet(candidate.sfs);
    }

    /**
     * Overloaded constructor of the object containing the list of equivalent
     * candidates to be added, the score and the sorted list of surface word
     * forms generated by these candidates. Overloaded constructor of the object
     * containing the list of equivalent candidates to be added, the score and
     * the sorted list of surface word forms
     * @param candidates Set of equivalent candidates in the
     * <code>EquivalentCandidates</code> object
     * @param score Score assigned to the candidate
     * @param sfs Scored surface forms set for the new ranked candidate
     */
    public RankedCandidate(Set<Candidate> candidates, double score,
            ScoredSurfaceFormsSet sfs) {
        super(candidates);
        this.score = score;
        this.sfs = sfs;
    }
    
    /**
     * Overloaded constructor of the object containing a candidate to be added,
     * the score and the sorted list of surface word forms generated by these
     * candidates. Overloaded constructor of the object containing a candidate
     * to be added, the score and the sorted list of surface word forms
     * generated by these candidates
     * @param candidate Stem/paradigm candidate
     * <code>EquivalentCandidates</code> object
     * @param score Score assigned to the candidate
     * @param sfs Scored surface forms set for the new ranked candidate
     */
    public RankedCandidate(Candidate candidate, double score, ScoredSurfaceFormsSet sfs) {
        super(candidate);
        this.score = score;
        this.sfs = sfs;
    }

    /**
     * Method that returns the score of the ranked candidate. Method that
     * returns the score of the ranked candidate
     * @return Returns the score of the ranked candidate
     */
    public double getScore() {
        return score;
    }

    /**
     * Method that sets the score of the candidate. Method that sets the score
     * of the candidate.
     * @param score New score for the candidate
     */
    public void setScore(double score) {
        this.score = score;
    }

    /**
     * Method that computes a hash code from the variables in the object.
     * @return Returns the hash code computed
     */
    @Override
    public int hashCode() {
        int hash = 5;
        hash = 37 * hash + (int) (Double.doubleToLongBits(this.score) ^ (Double.doubleToLongBits(this.score) >>> 32));
        //hash = 37 * hash + (this.rejectedforms != null ? this.rejectedforms.hashCode() : 0);
        hash = 37 * hash + (this.sfs != null ? this.sfs.hashCode() : 0);
        return hash;
    }
    
    /**
     * Method that compares two <code>RankedCandidate</code> objects by comparing
     * the equivalent candidates, the surface forms, and the score. Method that
     * compares two <code>RankedCandidate</code> objects by comparing the
     * equivalent candidates, the surface forms, and the score
     * @param obj The object to compare with the current object
     * @return Returns <code>true</code> if the two objects are equal and
     * <code>false</code> otherwise
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final RankedCandidate other = (RankedCandidate) obj;
        
        if (this.equivalent_candidates != other.equivalent_candidates && (this.equivalent_candidates == null || !this.equivalent_candidates.equals(other.equivalent_candidates))) {
            return false;
        }
        if (Double.doubleToLongBits(this.score) != Double.doubleToLongBits(other.score)) {
            return false;
        }
        if (this.sfs != other.sfs && (this.sfs == null || !this.sfs.equals(other.sfs))) {
            return false;
        }
        return true;
    }
    
    /**
     * Method that returns the scored list of surfaced forms generated by the
     * candidate. Method that returns the scored list of surfaced forms 
     * generated by the candidate
     * @return Returns the scored list of surfaced forms generated by the
     * candidate
     */
    public ScoredSurfaceFormsSet getScoredSurfaceFormSet(){
        return sfs;
    }
    
    /**
     * Method that sets a new scored list of surfaced forms generated by the
     * candidate.
     * @param sfs New scored list of surfaced forms generated by the candidate
     */
    public void setScoredSurfaceFormSet(ScoredSurfaceFormsSet sfs){
        this.sfs=sfs;
    }
    
    /**
     * Method returns a string representing the candidate, containing the list 
     * of equivalent stem/paradigms and the score assigned to them. Method
     * returns a string representing the candidate, containing the list of
     * equivalent stem/paradigms and the score assigned to them
     * @return Returns a string representing the candidate, containing the list
     * of equivalent stem/paradigms and the score assigned to them
     */
    @Override
    public String toString(){
        StringBuilder sb=new StringBuilder();
        for(Candidate c: this.equivalent_candidates){
            sb.append(c.toString());
            sb.append(";");
        }
        sb.append("Score=");
        sb.append(this.score);
        return sb.toString();
    }
}
